/* Normalize */
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
	 ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
}

/* Sections
	 ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
/* Grouping content
	 ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Text-level semantics
	 ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  text-decoration: underline dotted;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
	 ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none;
}

/* Forms
	 ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *		`fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  padding: 0;
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* Interactive
	 ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
	 ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

/* Box sizing */
/* Inherit box-sizing to more easily change it's value on a component level.
@link http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/ */
*,
*::before,
*::after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
}

/* Base */
/* Layout
--------------------------------------------- */
.row {
  display: flex;
  flex-direction: column;
  gap: 1rem 2rem;
  margin-bottom: 1.5rem;
}
@media only screen and (min-width: 48rem) {
  .row > .row {
    flex-direction: row;
  }
  .row > .row .column {
    flex-basis: 50%;
  }
}
@media only screen and (min-width: 62rem) {
  .row {
    flex-direction: row;
  }
  .row .column {
    flex-basis: 50%;
  }
  .row .column-66 {
    flex-basis: calc((100% - 4rem) / 3 * 2 + 2rem);
  }
  .row .column-33 {
    flex-basis: calc((100% - 4rem) / 3 * 1);
  }
}

@keyframes animation-spin {
  100% {
    transform: rotate(360deg);
  }
}
.animation-rotate {
  animation: animation-spin 0.8s linear infinite;
}

@keyframes animation-pulse {
  0% {
    opacity: 30%;
  }
  50% {
    opacity: 100%;
  }
  100% {
    opacity: 30%;
  }
}
.animation-pulse {
  animation-name: animation-pulse;
  animation-duration: 0.95s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
}

@keyframes animation-jump {
  0% {
    padding-top: 0;
  }
  50% {
    padding-top: 1rem;
  }
  100% {
    padding-top: 0;
  }
}
.animation-jump {
  animation-name: animation-jump;
  animation-duration: 0.65s;
  animation-timing-function: cubic-bezier(1, 1.44, 0.5, 3);
  animation-iteration-count: infinite;
}

body {
  color: white;
  background-color: #23232B;
  padding-top: 3rem;
  padding-bottom: 3rem;
}

.full-row {
  width: 100vw;
  position: relative;
  margin-left: -50vw;
  left: 50%;
}

section {
  position: relative;
  margin-top: 3rem;
}
section .anchor {
  position: absolute;
  top: -6rem;
}
header, .site-navigation__wrapper, main, footer {
  margin-left: auto;
  margin-right: auto;
  padding-left: 3rem;
  padding-right: 3rem;
  max-width: 35rem;
}
@media only screen and (min-width: 48rem) {
  header, .site-navigation__wrapper, main, footer {
    max-width: 100%;
  }
}
@media only screen and (min-width: 75rem) {
  header, .site-navigation__wrapper, main, footer {
    max-width: 70rem;
  }
}
@media only screen and (min-width: 90rem) {
  header, .site-navigation__wrapper, main, footer {
    max-width: 78.75rem;
    padding-left: 0;
    padding-right: 0;
  }
}

@media only screen and (min-width: 75rem) {
  body {
    padding-top: 4.5rem;
  }
  main {
    padding-top: calc(12.1875rem + 2.25rem);
  }
  section {
    margin-bottom: 6rem;
  }
}
@media only screen and (min-width: 90rem) {
  main {
    padding-top: calc(14.625rem + 2.25rem);
  }
}
.site-logo {
  max-width: 10rem;
  height: 4.5rem;
  position: relative;
  z-index: 9999;
}

.site-intro {
  color: #4c4c53;
  font-size: 1.125rem;
  line-height: 1.4;
  padding-top: 3rem;
  padding-bottom: 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}
.site-intro blockquote {
  padding: 0;
  margin: 0;
}
.site-intro blockquote br {
  display: none;
}
@media only screen and (min-width: 35rem) {
  .site-intro {
    font-size: 1.5rem;
  }
  .site-intro blockquote br {
    display: block;
  }
}
@media only screen and (min-width: 48rem) {
  .site-intro {
    font-size: 2.25rem;
  }
}
@media only screen and (min-width: 75rem) {
  .site-intro {
    font-size: 2.75rem;
  }
}

.site-navigation {
  position: sticky;
  top: -1px;
  margin-bottom: 1.5rem;
}
.site-navigation.sticky {
  background-color: #F9B348;
  transition: background-color 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  z-index: 9999;
}
.site-navigation.sticky .site-menu {
  justify-content: center;
  gap: 2rem;
}
.site-navigation.sticky .site-menu a {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #23232B;
}
.site-navigation.sticky .site-menu span {
  font-size: 1rem;
  opacity: 0.15;
  transition: opacity 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.site-navigation.sticky .site-menu li.active a span {
  opacity: 1;
}

.site-menu {
  padding: 0;
  margin: 0;
  list-style: none;
  display: flex;
  align-items: center;
  gap: 1rem;
  height: 4.5rem;
}
.site-menu span {
  font-size: 0;
}

@media only screen and (min-width: 75rem) {
  .site-intro {
    height: 12.1875rem;
  }
  .site-navigation.sticky {
    width: 100%;
  }
  .site-navigation.sticky .site-menu {
    width: 100%;
    margin-left: 0;
    justify-content: center;
    gap: 3rem;
  }
  .site-menu {
    gap: 2rem;
    margin-top: calc(-12.1875rem - 4.5rem);
    justify-content: flex-end;
  }
}
.site-info {
  margin-top: 9rem;
  display: flex;
  gap: 10px;
}
.site-info a {
  color: #F9B348;
}
.site-info a:hover, .site-info a:active, .site-info a:focus {
  color: #4c4c53;
}
.site-info .cc {
  color: #4c4c53;
}
.site-info .cc a {
  color: rgb(125.0188679245, 125.0188679245, 135.9811320755);
}
.site-info .cc a:hover {
  color: white;
}
.site-info .cc a:hover img {
  opacity: 1;
}
.site-info .cc img {
  opacity: 0.3;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

:root {
  --animate-duration: 0.8s;
  --animate-delay: 0;
  --animate-repeat: 1;
}

@keyframes start {
  0% {
    opacity: 0;
    transform: translate3d(0, 50%, 0);
  }
  100% {
    opacity: 1;
    transform: translateZ(0);
  }
}
.animate, .site-logo, .site-intro, .site-navigation {
  animation-name: start;
  animation-duration: var(--animate-duration);
  animation-fill-mode: both;
  animation-iteration-count: var(--animate-repeat);
}

.site-intro {
  animation-delay: 0.5s;
}

.site-navigation {
  animation-delay: 0.3s;
}

.work-grid {
  display: grid;
  grid-template-rows: 0fr;
  transition: grid-template-rows 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) 0.2s;
  opacity: 0;
}
.work-grid > div {
  overflow: hidden;
}
.work-grid.ready {
  grid-template-rows: 1fr;
  opacity: 1;
}

.work-loader {
  height: calc(50px + 6rem);
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-loader:before {
  position: absolute;
  top: 0;
  left: calc(50% - 25px);
  content: "";
  display: block;
  text-align: center;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  border: 6.25px solid #F9B348;
  margin: 3rem auto;
  animation-name: preload;
  animation-duration: 0.95s;
  animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  animation-iteration-count: infinite;
  transition: all 0.9s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
@keyframes preload {
  0% {
    opacity: 0;
    transform: scale(0.25);
  }
  30% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: scale(1.5);
  }
}
.work-loader.done {
  height: 0;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-loader.done:before {
  animation-fill-mode: forwards;
  animation-iteration-count: 1;
  padding: 0;
  opacity: 0;
}

/* Content
----------------------------------------------*/
section.work {
  margin-top: 0;
}

@media only screen and (min-width: 75rem) {
  .work-cine {
    width: 100vw;
    position: relative;
    margin-left: -50vw;
    left: 50%;
  }
}
.work-cine .swiper-slide img {
  transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  filter: grayscale(1);
  opacity: 0.125;
}
.work-cine .swiper-slide-active img {
  filter: grayscale(0);
  opacity: 1;
}
.project {
  position: relative;
}
.project:after {
  display: block;
  content: "";
  height: 4.5rem;
  width: 100%;
}
.project-card img {
  width: 100%;
  height: 100%;
}
.project-card img img {
  object-fit: cover;
  width: 100%;
  height: 100%;
}
.project-card figcaption {
  box-sizing: border-box;
  position: absolute;
  display: flex;
  flex-direction: column;
  justify-content: center;
  top: -100%;
  left: 0;
  width: 100%;
  height: calc(100% - 3rem);
  padding: 4rem;
  text-align: center;
  background-color: rgba(35, 35, 43, 0.97);
  opacity: 0;
  transition: opacity 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94), top 0s linear 0.4s;
}
.project-card figcaption h4, .project-card figcaption p, .project-card figcaption:after {
  transform: translateY(-1em);
  transition: transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  margin: 0;
  line-height: 1.8rem;
  font-size: 90%;
}
.project-card figcaption h4 {
  color: #F9B348;
  font-size: 1rem;
  font-weight: 300;
}
.project-card figcaption:after {
  display: block;
  content: "\e901";
  font-family: "Icomoon";
  margin-top: 1.5rem;
  font-size: 2em;
  opacity: 0.15;
}
@media only screen and (min-width: 75rem) {
  .project-link:hover, .project-link:active, .project-link:focus {
    color: white;
  }
  .project-link:hover img, .project-link:active img, .project-link:focus img {
    filter: grayscale(1);
  }
  .project-link:hover figcaption, .project-link:active figcaption, .project-link:focus figcaption {
    opacity: 1;
    top: 0;
    transition: opacity 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }
  .project-link:hover figcaption h4, .project-link:hover figcaption p, .project-link:hover figcaption:after, .project-link:active figcaption h4, .project-link:active figcaption p, .project-link:active figcaption:after, .project-link:focus figcaption h4, .project-link:focus figcaption p, .project-link:focus figcaption:after {
    transform: translateY(0);
  }
}
@media only screen and (min-width: 75rem) {
  .project-link figcaption {
    padding: 2.5rem;
  }
}
@media only screen and (min-width: 81.25rem) {
  .project-link figcaption {
    padding: 2rem;
  }
  .project-link figcaption h4, .project-link figcaption p {
    font-size: 90%;
  }
}
@media only screen and (min-width: 112.5rem) {
  .project-link figcaption {
    padding: 6rem;
  }
  .project-link figcaption h4, .project-link figcaption p {
    font-size: 120%;
  }
}

.work-latest h3 {
  opacity: 0.25;
}
.work-latest .job-table {
  display: flex;
  flex-direction: column;
}
.work-latest .job-table.expand .job {
  grid-template-rows: 1fr;
}
.work-latest .job-table.expand .job-content {
  border-bottom: 1px solid rgba(76, 76, 83, 0.5);
  padding: 0.375rem 0;
  opacity: 1;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-latest .job {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 0fr;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-latest .job-content {
  display: flex;
  padding: 0;
  border-bottom: 0 solid transparent;
  max-height: 100%;
  overflow: hidden;
  opacity: 0;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-latest .job.visible {
  grid-template-rows: 1fr;
}
.work-latest .job.visible .job-content {
  border-bottom: 1px solid rgba(76, 76, 83, 0.5);
  padding: 0.375rem 0;
  opacity: 1;
  transition: padding 0s linear 0s, opacity 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.work-latest .job-name:after {
  content: "-";
  margin-left: 5px;
  margin-right: 5px;
}
.work-latest .job-task {
  display: none;
}
.work-latest .job-date {
  color: #4c4c53;
}
.work-latest .job-control {
  display: flex;
  justify-content: flex-end;
  background-color: transparent;
  margin-top: 1.5rem;
  padding: 0;
  border: none;
  cursor: pointer;
}
.work-latest .job-control:hover .icon {
  color: white;
  border-color: white;
}
.work-latest .job-control .icon {
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  line-height: 2rem;
  border: 1px solid #4c4c53;
  font-size: 1em;
  color: #4c4c53;
  border-radius: 50%;
  transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  transform-origin: center center;
}
.work-latest .job-control .text {
  visibility: hidden;
  width: 0;
  height: 0;
  overflow: hidden;
}
.work-latest .job-control.active .icon {
  transform: rotate(180deg);
}
@media only screen and (min-width: 35rem) {
  .work-latest .job {
    justify-content: space-between;
  }
  .work-latest .job-name {
    flex-basis: 70%;
  }
  .work-latest .job-name:after {
    display: none;
  }
  .work-latest .job-date {
    flex-grow: 1;
    text-align: right;
  }
}
@media only screen and (min-width: 48rem) {
  .work-latest .job-name {
    flex-basis: 35%;
    flex-grow: 0;
    padding-right: 2rem;
  }
  .work-latest .job-task {
    flex-basis: 50%;
    display: block;
  }
}
@media only screen and (min-width: 81.25rem) {
  .work-latest .job-name {
    flex-basis: 25%;
  }
}
@media only screen and (min-width: 112.5rem) {
  .work-latest {
    padding-top: 2rem;
  }
}

.about-tags {
  font-size: 0.85rem;
}
.about-tags ul {
  position: relative;
  display: flex;
  list-style: none;
  flex-wrap: wrap;
  gap: 0.6rem;
  margin: 0 4rem 0 0;
  margin: 0;
  padding: 0;
}
.about-tags li {
  background-color: rgb(46.4423076923, 46.4423076923, 57.0576923077);
  color: rgb(125.0188679245, 125.0188679245, 135.9811320755);
  padding: 0 1rem;
  border-radius: 2rem;
  cursor: default;
  transition: all 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.about-tags li:hover {
  background-color: #F9B348;
  color: #23232B;
}

.contact .mail {
  display: inline-flex;
  align-items: center;
  gap: 10px;
  text-decoration: none;
  color: white;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.contact .mail em {
  font-style: normal;
}
.contact .mail.done {
  color: #4c4c53;
}
.contact .mail.done span {
  opacity: 0;
  width: 0;
  overflow: hidden;
}
.contact .mail:hover span {
  color: white;
}
.contact .mail span {
  color: #4c4c53;
  transition: color 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
.contact .mail-output {
  visibility: hidden;
  color: white;
  transition: color 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  opacity: 0;
  font-size: inherit;
}
.contact .mail-output.succes {
  visibility: visible;
  opacity: 1;
}
.contact-buttons {
  text-align: left;
}
.contact-buttons ul {
  display: flex;
  justify-content: flex-start;
  gap: 2rem;
  margin: 0;
  padding: 0;
  list-style: none;
}
.contact-buttons ul span.icon-mail {
  font-size: 0.9em;
}
.contact-buttons ul span.icon-social-linkedin {
  margin-top: -6px;
}
.contact-buttons ul a {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  height: 100%;
  font-size: 4rem;
  color: #4c4c53;
}

/* Typography
--------------------------------------------- */
/* reddit-sans-300 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Reddit Sans";
  font-style: normal;
  font-weight: 300;
  src: url("../fonts/reddit-sans-v4-latin-300.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* reddit-sans-regular - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Reddit Sans";
  font-style: normal;
  font-weight: 400;
  src: url("../fonts/reddit-sans-v4-latin-regular.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
/* reddit-sans-600 - latin */
@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Reddit Sans";
  font-style: normal;
  font-weight: 600;
  src: url("../fonts/reddit-sans-v4-latin-600.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+, Safari 12+, iOS 10+ */
}
@font-face {
  font-family: "icomoon";
  src: url("../icons/icomoon.eot?fenyu");
  src: url("../icons/icomoon.eot?fenyu#iefix") format("embedded-opentype"), url("../icons/icomoon.ttf?fenyu") format("truetype"), url("../icons/icomoon.woff?fenyu") format("woff"), url("../icons/icomoon.svg?fenyu#icomoon") format("svg");
  font-weight: normal;
  font-style: normal;
  font-display: block;
}
[class^=icon-], [class*=" icon-"] {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: "icomoon" !important;
  speak: never;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-arrow-down:before {
  content: "\e900";
}

.icon-arrow:before {
  content: "\e901";
}

.icon-compas:before {
  content: "\e902";
}

.icon-social-git:before {
  content: "\e903";
}

.icon-social-linkedin:before {
  content: "\e904";
}

.icon-about:before {
  content: "\e905";
}

.icon-contact:before {
  content: "\e906";
}

.icon-work:before {
  content: "\e907";
}

.icon-mail:before {
  content: "\e908";
}

.icon-copy:before {
  content: "\e909";
}

html {
  box-sizing: border-box;
  height: 100%;
  text-rendering: optimizeLegibility;
}

body,
button,
input,
select,
optgroup,
textarea {
  color: white;
  font-family: "Reddit Sans";
  font-size: 1rem;
  line-height: 2rem;
  font-weight: 300;
}

p {
  font-family: "Reddit Sans";
  margin: 0;
}

h1, h2, h3, h4, h5, h6 {
  clear: both;
  color: white;
  font-weight: 300;
  letter-spacing: 0.5px;
}

h1 {
  line-height: 0.98;
}

h2 {
  line-height: 1.12;
}

h3, h4, h5, h6 {
  line-height: 1.4;
}

h1 {
  font-size: 4rem;
}

h2 {
  font-size: 2.25rem;
}

h3 {
  font-size: 1.25rem;
}

h4 {
  font-size: 1.125rem;
}

h5 {
  font-size: 1rem;
}

h6 {
  font-size: 0.875rem;
}

@media only screen and (min-width: 75rem) {
  h1 {
    font-size: 5rem;
  }
  h2 {
    font-size: 2.75rem;
  }
  h3 {
    font-size: 1.5rem;
  }
}
.copy {
  font-size: 1.1rem;
  line-height: 180%;
  color: #4c4c53;
}
.copy a {
  color: inherit;
  text-decoration: underline;
}
.copy a:hover, .copy a:active, .copy a:focus {
  color: white;
  text-decoration: none;
}
@media only screen and (min-width: 48rem) {
  .copy {
    font-size: 1rem;
  }
}
@media only screen and (min-width: 90rem) {
  .copy {
    font-size: 1.2rem;
  }
}

/* Elements
--------------------------------------------- */
figure {
  margin: 0;
}

img {
  vertical-align: bottom;
}

.hidden, .quiet {
  display: none;
}

/* Links
--------------------------------------------- */
a {
  color: white;
  text-decoration: none;
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
a:hover, a:focus, a:active {
  color: #F9B348;
}

/* Accessibility */
/* Text meant only for screen readers. */
.screen-reader-text {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  width: 1px;
  word-wrap: normal !important;
}
.screen-reader-text:focus {
  background-color: rgb(125.0188679245, 125.0188679245, 135.9811320755);
  border-radius: 3px;
  box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  clip: auto !important;
  clip-path: none;
  color: #21759b;
  display: block;
  font-size: 0.875rem;
  font-weight: 700;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: 15px 23px 14px;
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
}

/* Do not show the outline on the skip link target. */
#primary[tabindex="-1"]:focus {
  outline: 0;
}

/* Plugins */
/* Swiper */
:root {
  --swiper-pagination-bullet-inactive-color: rgb(125.0188679245, 125.0188679245, 135.9811320755);
  --swiper-theme-color: white !important;
  --swiper-pagination-bullet-size: 0.6rem;
}

.swiper-pagination-bullet {
  transition: all 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
